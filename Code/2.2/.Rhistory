alpha = 0.4) +
ggtitle("Predicted vs real values") +
scale_color_manual(name = NULL, breaks = c("a", "b"),
labels = c("BPF", "real data"), values = c("red", "blue"))
bpf.stratified$x.means[100]
tibble(value = as.numeric(bpf.stratified$weights.norm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 30)
source("data_generator.R")
source("SIS.R")
library(tibble)
library(ggplot2)
library(magrittr)
set.seed(2723)
my.data <- generate_data(1.00, 0.16, 0.64, 100)
sis.filter <- sis(my.data$y, 200, 100)
# estimated value of X_100 = -1.472395
# real value = -1.503388
# histogram of weights
tibble(
value = as.numeric(sis.filter$wnorm[100, ])) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 100)
ggsave("sis_histogram2.png")
# visualize results
tibble(t = 1:100, value = sis.filter$x.means) %>%
ggplot(aes(x = t, y = value)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b")) +
ggtitle("Predicted vs. real values") +
scale_color_manual(name = NULL, breaks = c("a", "b"),
labels = c("SIS", "Real data"), values = c("red", "blue"))
mse.tibble <- tibble(N = as.numeric(), mse = as.numeric())
for(N in seq(5,500, 10)){
sis.filter <- sis(my.data$y[1:T], N, 100)
mse.tibble <- add_row(mse.tibble, N = N, mse = (sis.filter$x.means[N] - my.data$x[N])^2)
}
ggplot(mse.tibble, aes(x = N, y = mse)) +
geom_line() + ylab("MSE")
mse.tibble <- tibble(N = as.numeric(), mse = as.numeric())
for(N in seq(5,500, 10)){
sis.filter <- sis(my.data$y, N, 100)
mse.tibble <- add_row(mse.tibble, N = N, mse = (sis.filter$x.means[N] - my.data$x[N])^2)
}
ggplot(mse.tibble, aes(x = N, y = mse)) +
geom_line() + ylab("MSE")
mse.tibble <- tibble(N = as.numeric(), mse = as.numeric())
for(N in seq(5,500, 10)){
sis.filter <- sis(my.data$y, N, 100)
mse.tibble <- add_row(mse.tibble, N = N, mse = (sis.filter$x.means[100] - my.data$x[100])^2)
}
ggplot(mse.tibble, aes(x = N, y = mse)) +
geom_line() + ylab("MSE")
mse.tibble <- tibble(N = as.numeric(), mse = as.numeric())
for(N in seq(5,1000, 10)){
sis.filter <- sis(my.data$y, N, 100)
mse.tibble <- add_row(mse.tibble, N = N, mse = (sis.filter$x.means[100] - my.data$x[100])^2)
}
ggplot(mse.tibble, aes(x = N, y = mse)) +
geom_line() + ylab("MSE")
mse.tibble <- tibble(N = as.numeric(), mse = as.numeric())
for(N in seq(5,2000, 10)){
sis.filter <- sis(my.data$y, N, 100)
mse.tibble <- add_row(mse.tibble, N = N, mse = (sis.filter$x.means[100] - my.data$x[100])^2)
}
ggplot(mse.tibble, aes(x = N, y = mse)) +
geom_line() + ylab("MSE")
mse.tibble <- tibble(N = as.numeric(), mse = as.numeric())
for(N in seq(5,1000, 5)){
sis.filter <- sis(my.data$y, N, 100)
mse.tibble <- add_row(mse.tibble, N = N, mse = (sis.filter$x.means[100] - my.data$x[100])^2)
}
ggplot(mse.tibble, aes(x = N, y = mse)) +
geom_line() + ylab("MSE")
mse.tibble <- tibble(N = as.numeric(), mse = as.numeric())
for(N in seq(10,1500, 10)){
sis.filter <- sis(my.data$y, N, 100)
mse.tibble <- add_row(mse.tibble, N = N, mse = (sis.filter$x.means[100] - my.data$x[100])^2)
}
ggplot(mse.tibble, aes(x = N, y = mse)) +
geom_line() + ylab("MSE")
mse.tibble <- tibble(N = as.numeric(), mse = as.numeric())
for(N in seq(10,1500, 5)){
sis.filter <- sis(my.data$y, N, 100)
mse.tibble <- add_row(mse.tibble, N = N, mse = (sis.filter$x.means[100] - my.data$x[100])^2)
}
ggplot(mse.tibble, aes(x = N, y = mse)) +
geom_line() + ylab("MSE")
sis.filter <- sis(my.data$y, 200, 100)
bpf.stratified$x.means
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = real_data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d"))
ggtitle("SIS vs. Bootstrap Filter") +
scale_color_manual(
breaks = c("a", "b", "c", "d"),
labels = c("SIS", "real data", "BPF multinom", "BPF stratified"),
values = c("#D81B60", "blue", "#004D40", "#9B59B6 "))
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = real_data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(
breaks = c("a", "b", "c", "d"),
labels = c("SIS", "real data", "BPF multinom", "BPF stratified"),
values = c("#D81B60", "blue", "#004D40", "#9B59B6 "))
bpf.multinomial <- bootstrap.filter(my.data$y, 0.16, 0.64, 200, 100, multinomial.resampling)
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = real_data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(
breaks = c("a", "b", "c", "d"),
labels = c("SIS", "real data", "BPF multinom", "BPF stratified"),
values = c("#D81B60", "blue", "#004D40", "#9B59B6 "))
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(
breaks = c("a", "b", "c", "d"),
labels = c("SIS", "real data", "BPF multinom", "BPF stratified"),
values = c("#D81B60", "blue", "#004D40", "#9B59B6 "))
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(
breaks = c("a", "b", "c", "d"),
labels = c("SIS", "real data", "BPF multinom", "BPF stratified"),
values = c("#D81B60", "blue", "#004D40", "#9B59B6"))
library(RColorBrewer)
display.brewer.pal(n = 8, name = 'Dark2')
brewer.pal(n = 8, name = 'Dark2')
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(
breaks = c("a", "b", "c", "d"),
labels = c("SIS", "real data", "BPF multinom", "BPF stratified"),
values = c("#1B9E77", "#666666", "#D95F02", "#7570B3"))
tibble(t = 1:100, value = bpf.multinomial$x.means) %>%
ggplot(aes(x = t, y = value)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b"),
alpha = 0.4) +
ggtitle("Predicted vs real values") +
scale_color_manual(name = NULL, breaks = c("a", "b"),
labels = c("BPF", "real data"), values = c("red", "blue"))
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(
breaks = c("a", "b", "c", "d"),
labels = c("SIS", "real data", "BPF multinom", "BPF stratified"),
values = c("#1B9E77", "#666666", "#D95F02", "#7570B3"))
display.brewer.pal(n = 8, name = 'Dark2')
set.seed(2723)
my.data <- generate_data(1.00, 0.16, 0.64, 100)
bpf.multinomial <- bootstrap.filter(my.data$y, 0.16, 0.64, 200, 100, multinomial.resampling)
# visualize
tibble(t = 1:100, value = bpf.multinomial$x.means) %>%
ggplot(aes(x = t, y = value)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b"),
alpha = 0.4) +
ggtitle("Predicted vs real values") +
scale_color_manual(name = NULL, breaks = c("a", "b"),
labels = c("BPF", "real data"), values = c("red", "blue"))
# point estimate
bpf.multinomial$x.means[100]
my.data$x[100]
# visualise weights
tibble(value = as.numeric(bpf.multinomial$weights.norm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 30)
#############
bpf.stratified <- bootstrap.filter(my.data$y, 0.16, 0.64, 200, 100, stratified.resampling)
tibble(t = 1:100, value = bpf.stratified$x.means) %>%
ggplot(aes(x = t, y = value)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b"),
alpha = 0.4) +
ggtitle("Predicted vs real values") +
scale_color_manual(name = NULL, breaks = c("a", "b"),
labels = c("BPF", "real data"), values = c("red", "blue"))
# point estimate
bpf.stratified$x.means[100]
# weights histogram
tibble(value = as.numeric(bpf.stratified$weights.norm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 30)
# Compare all three methods
sis.filter <- sis(my.data$y, 200, 100)
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(
breaks = c("a", "b", "c", "d"),
labels = c("BPF multinom", "real data", "SIS", "BPF stratified"),
values = c("#1B9E77", "#666666", "#D95F02", "#7570B3"))
ggsave("comparison_filters.png")
tibble(t = 1:100, value = bpf.multinomial$x.means) %>%
ggplot(aes(x = t, y = value)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b"),
alpha = 0.4) +
ggtitle("Predicted vs real values") +
scale_color_manual(name = NULL, breaks = c("a", "b"),
labels = c("BPF", "real data"), values = c("red", "blue"))
display.brewer.pal(n = 8, name = 'Dark2')
display.brewer.pal(n = 8, name = 'Dark2')
brewer.pal(n = 8, name = 'Dark2')
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(breaks = c("a", "b", "c", "d"),
labels = c("BPF multinom", "real data", "SIS", "BPF stratified"),
values = c("#E6AB02", "#666666", "#D95F02", "#7570B3"))
ggsave("comparison_filters.png")
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(breaks = c("a", "b", "c", "d"),
labels = c("BPF multinom", "real data", "SIS", "BPF stratified"),
values = c("#E6AB02", "red", "#D95F02", "#7570B3"))
ggsave("comparison_filters.png")
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(breaks = c("a", "b", "c", "d"),
labels = c("BPF multinom", "real data", "SIS", "BPF stratified"),
values = c("red", "#666666", "#D95F02", "#7570B3"))
ggsave("comparison_filters.png")
brewer.pal(n = 8, name = 'Dark2')
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x)) +
geom_line(color = "#D95F02") +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(breaks = c("a", "b", "c", "d"),
labels = c("BPF multinom", "real data", "SIS", "BPF stratified"),
values = c("#D95F02", "#666666", "#D95F02", "#7570B3"))
ggsave("comparison_filters.png")
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(breaks = c("a", "b", "c", "d"),
labels = c("BPF multinom", "real data", "SIS", "BPF stratified"),
values = c("#D95F02", "#666666", "#D95F02", "#7570B3"))
ggsave("comparison_filters.png")
tibble(value = as.numeric(bpf.stratified$weights.norm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 30)
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x)) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(breaks = c("a", "b", "c", "d"),
labels = c("BPF multinom", "real data", "SIS", "BPF stratified"),
values = c("#D95F02", "#666666", "#D95F02", "#7570B3"))
ggsave("comparison_filters.png")
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x, color = "a")) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(breaks = c("a", "b", "c", "d"),
labels = c("BPF multinom", "real data", "SIS", "BPF stratified"),
values = c("#D95F02", "#666666", "#D95F02", "#7570B3"))
ggsave("comparison_filters.png")
brewer.pal(n = 8, name = 'Dark2')
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x, color = "a")) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(breaks = c("a", "b", "c", "d"),
labels = c("BPF multinom", "real data", "SIS", "BPF stratified"),
values = c("#A6761D", "#666666", "#D95F02", "#7570B3"))
ggsave("comparison_filters.png")
brewer.pal(n = 8, name = 'Dark2')
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x, color = "a")) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(breaks = c("a", "b", "c", "d"),
labels = c("BPF multinom", "real data", "SIS", "BPF stratified"),
values = c("#E7298A", "#666666", "#D95F02", "#7570B3"))
ggsave("comparison_filters.png")
brewer.pal(n = 8, name = 'Dark2')
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x, color = "a")) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(breaks = c("a", "b", "c", "d"),
labels = c("BPF multinom", "real data", "SIS", "BPF stratified"),
values = c("#A6761D", "#666666", "#D95F02", "#7570B3"))
ggsave("comparison_filters.png")
brewer.pal(n = 8, name = 'Dark2')
display.brewer.pal(n = 8, name = 'Dark2')
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x, color = "a")) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(breaks = c("a", "b", "c", "d"),
labels = c("BPF multinom", "real data", "SIS", "BPF stratified"),
values = c("#66A61E", "#666666", "#D95F02", "#7570B3"))
ggsave("comparison_filters.png")
?ggsave
ggsave("comparison_filters.png", units = c("cm"), width = 3)
ggsave("comparison_filters.png", units = c("cm"), width = 10)
ggsave("comparison_filters.png", units = c("cm"), width = 30)
ggsave("comparison_filters.png", units = c("cm"), width = 30)
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x, color = "a")) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(breaks = c("a", "b", "c", "d"),
labels = c("BPF multinomial", "Real data", "SIS", "BPF stratified"),
values = c("#66A61E", "#666666", "#D95F02", "#7570B3"))
ggsave("comparison_filters.png", units = c("cm"), width = 30)
# point estimate
bpf.multinomial$x.means[100]
my.data$x[100]
bpf.stratified$x.means[100]
tibble(value = as.numeric(bpf.stratified$weights.norm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 30)
tibble(value = as.numeric(bpf.multinomial$weights.norm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 30)
tibble(value = as.numeric(bpf.multinomial$weights.norm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 30)
ggsave("bpf_multinomial_histogram.png"
)
tibble(value = as.numeric(bpf.stratified$weights.norm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 30)
ggsave("bpf_stratified_histogram.png")
sis.filter <- sis(my.data$y, 200, 100)
tibble(value = as.numeric(sis$weights.norm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 30)
ggsave("sis_histogram.png")
sis.filter <- sis(my.data$y, 200, 100)
tibble(value = as.numeric(sis$weights.norm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 30)
sis
sis.filter
sis.filter <- sis(my.data$y, 200, 100)
tibble(value = as.numeric(sis$wnorm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 30)
ggsave("sis_histogram.png")
tibble(value = as.numeric(sis$wnorm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 30)
sis.filter <- sis(my.data$y, 200, 100)
tibble(value = as.numeric(sis.filter$wnorm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 30)
ggsave("sis_histogram.png")
tibble(value = as.numeric(bpf.stratified$weights.norm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 30)
tibble(value = as.numeric(bpf.stratified$weights.norm[100, ])) %>% ggplot(aes(x = value)) +
geom_histogram(bins = 5)
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x, color = "a")) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(breaks = c("a", "b", "c", "d"),
labels = c("BPF multinomial", "Real data", "SIS", "BPF stratified"),
values = c("#66A61E", "#666666", "#D95F02", "#7570B3"))
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x, color = "a")) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(breaks = c("a", "b", "c", "d"),
labels = c("BPF multinomial", "Real data", "SIS", "BPF stratified"),
values = c("#66A61E", "#666666", "#D95F02", "#7570B3")) +
theme(legend.text = element_text(size = 15))
ggsave("comparison_filters.png", units = c("cm"), width = 30)
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x, color = "a")) +
geom_line(aes(color = "a")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "b") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(name = NULL,
breaks = c("a", "b", "c", "d"),
labels = c("BPF multinomial", "Real data", "SIS", "BPF stratified"),
values = c("#66A61E", "#666666", "#D95F02", "#7570B3")) +
theme(legend.text = element_text(size = 18))
ggsave("comparison_filters.png", units = c("cm"), width = 30)
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x, color = "b")) +
geom_line(aes(color = "b")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "a") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "c")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(name = NULL,
breaks = c("a", "b", "c", "d"),
labels = c("Real data", "BPF multinomial", "SIS", "BPF stratified"),
values = c("#666666", "#66A61E", "#D95F02", "#7570B3")) +
theme(legend.text = element_text(size = 18))
ggplot(data = tibble(t = 1:100, x= bpf.multinomial$x.means), aes(x = t, y = x, color = "c")) +
geom_line(aes(color = "b")) +
geom_line(data = tibble(t = 1:100, x = my.data$x), aes(x = t, y = x, color = "a") , linetype = "dashed") +
geom_line(data = tibble(t = 1:100, x = sis.filter$x.means), aes(t, x, color = "b")) +
geom_line(data = tibble(t = 1:100, x = bpf.stratified$x.means), aes(t, x)) +
geom_line(aes(color = "d")) +
scale_color_manual(name = NULL,
breaks = c("a", "b", "c", "d"),
labels = c("Real data", "SIS", "BPF multinomial", "BPF stratified"),
values = c("#666666", "#D95F02", "#66A61E", "#7570B3")) +
theme(legend.text = element_text(size = 18))
ggsave("comparison_filters.png", units = c("cm"), width = 30)
mse.tibble <- tibble(N = as.numeric(), mse = as.numeric())
for(N in seq(10,1500, 5)){
sis.filter <- sis(my.data$y, N, 100)
mse.tibble <- add_row(mse.tibble, N = N, mse = (sis.filter$x.means[100] - my.data$x[100])^2)
}
ggplot(mse.tibble, aes(x = N, y = mse)) +
geom_line() + ylab("MSE")
mse.tibble.sis <- tibble(N = as.numeric(), mse = as.numeric())
for(N in seq(10,1500, 5)){
sis.filter <- sis(my.data$y, N, 100)
mse.tibble.sis <- add_row(mse.tibble.sis, N = N, mse = (sis.filter$x.means[100] - my.data$x[100])^2)
}
ggplot(mse.tibble.sis, aes(x = N, y = mse)) +
geom_line() + ylab("MSE")
# MSE
mse.tibble.bpf.multinomial <- tibble(N = as.numeric(), mse = as.numeric())
for(N in seq(10,1500, 5)){
sis.filter <- sis(my.data$y, N, 100)
mse.tibble.bpf.multinomial <- add_row(mse.tibble.bpf.multinomial, N = N, mse = (sis.filter$x.means[100] - my.data$x[100])^2)
}
ggplot(mse.tibble.bpf.multinomial, aes(x = N, y = mse)) +
geom_line() + ylab("MSE")
mse.tibble.bpf.multinomial <- tibble(N = as.numeric(), mse = as.numeric())
for(N in seq(10,1500, 5)){
bpf.multinomial <- bootstrap.filter(my.data$y, N, 100, multinomial.resampling)
mse.tibble.bpf.multinomial <- add_row(mse.tibble.bpf.multinomial, N = N, mse = (bpf.multinomial$x.means[100] - my.data$x[100])^2)
}
View(bootstrap.filter)
mse.tibble.bpf.multinomial <- tibble(N = as.numeric(), mse = as.numeric())
for(N in seq(10,1500, 5)){
bpf.multinomial <- bootstrap.filter(my.data$y, 0.16, 0.64, N, 100, multinomial.resampling)
mse.tibble.bpf.multinomial <- add_row(mse.tibble.bpf.multinomial, N = N, mse = (bpf.multinomial$x.means[100] - my.data$x[100])^2)
}
ggplot(mse.tibble.bpf.multinomial, aes(x = N, y = mse)) +
geom_line() + ylab("MSE")
mse.tibble.bpf.multinomial$mse %>% mean
mse.tibble.sis %>% mean
mse.tibble.sis$mse %>% mean
#MSE
mse.tibble.bpf.stratified <- tibble(N = as.numeric(), mse = as.numeric())
for(N in seq(10,1500, 5)){
bpf.stratified <- bootstrap.filter(my.data$y, 0.16, 0.64, N, 100, stratified.resampling)
mse.tibble.bpf.stratified <- add_row(mse.tibble.bpf.stratified, N = N, mse = (bpf.stratified$x.means[100] - my.data$x[100])^2)
}
ggplot(mse.tibble.bpf.stratified, aes(x = N, y = mse)) +
geom_line() + ylab("MSE")
mse.tibble.sis$mse %>% mean
mse.tibble.bpf.multinomial$mse %>% mean
mse.tibble.bpf.stratified$mse %>% mean
var(sis.filter$wnorm[100, ])
var(bpf.stratified$weights.norm[100, ])
var(bpf.multinomial$weights.norm[100, ])
var(bpf.multinomial$weights.norm[100, ])
var(bpf.multinomial$weights.norm[99, ])
var(bpf.multinomial$weights.norm[1, ])
var(bpf.multinomial$weights.norm[2, ])
