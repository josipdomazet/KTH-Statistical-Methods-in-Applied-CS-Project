}
extract.backgrounds <- function(data, current.state, N, W){
backgrounds <- matrix(nrow = N, ncol = M - W)
end.positions <- current.state + W - 1
for(i in 1:N){
backgrounds[i, ] <- as.matrix(data[i, -c(current.state[i]:end.positions[i])])[1, ]
}
backgrounds
}
gibbs.sampler <- function(my.data, alphabet, num.iterations, N, M, W, K, alpha.bg, alpha.mw){
# the states are vectors of start positions
initial.positions <- sample(1:(M - W + 1), N, replace = T)
samples <- matrix(nrow = 0, ncol = N)
samples <- rbind(samples, initial.positions)
# do this only ONCE!
magic.words <- extract.magic.words(my.data, initial.positions, N, W)
backgrounds <- extract.backgrounds(my.data, initial.positions, N, W)
for(it in 1:num.iterations){
current.state <- samples[it, ]
end.positions <- current.state + W - 1
new.starts <- matrix(nrow = 1, ncol = N)
# using current stat
# precompute counts used for posterior
## counts for background: all characters except the magic words
background.count.matrix <- matrix(nrow = N, ncol = K)
for(n in 1:N){
temp <- table(backgrounds[n, ])[alphabet] # use all, then modify in the loop
temp[is.na(temp)] <- 0
background.count.matrix[n, ] <- temp
}
for(n in 1:N){
posterior.tilda <- posterior(my.data[n, ], current.state, n, magic.words, backgrounds,
background.count.matrix)
posterior.norm <- exp.normalize(posterior.tilda)
new.start.for.n <- sample(1:(M - W + 1), size = 1, prob=posterior.norm)
current.state[n] <- new.start.for.n
magic.words[n, ] <- my.data[n, new.start.for.n:(new.start.for.n+W-1)]
backgrounds[n, ] <- my.data[n, -c(new.start.for.n:(new.start.for.n+W-1))]
new.starts[1, n] <- new.start.for.n
}
samples <- rbind(samples, new.starts[1, ])
}
samples
}
bg.prob <- function(counts){
part2 <- sum(lgamma(counts + alpha.bg) - loggamma.bg)
log.p <- part1.bg.prob + part2
log.p
}
mw.prob <- function(counts.position){
part2 <- sum(lgamma(counts.position + alpha.mw) - loggamma.mw)
log.p <- part1.mw.prob + part2
log.p
}
exp.normalize <- function(prob){
prob <- exp(prob - max(prob))
return(prob/sum(prob))
}
posterior <- function(data, current.state, seq.id, magic.words, backgrounds, matrix.bg){
prob.distribution <- rep(NA, M - W + 1)
# precompute for the magic word
precomputed.mw <- matrix(nrow = W, ncol = K)
for(j in 1:W){
temp <- table(magic.words[-seq.id, j])[alphabet]
temp[is.na(temp)] <- 0
precomputed.mw[j, ] <- temp
}
precomputed.bg.sum <- matrix.bg[-seq.id, ] %>% apply(2, sum)
for(new.position in 1:(M - W + 1)){
# magic word (and background) are now changed
end.position <- new.position + W - 1
# permanently
magic.words[seq.id, ] <- data[new.position:end.position] # modify one magic word
backgrounds[seq.id, ] <- data[-c(new.position:end.position)] # modify one background
# permanently
counts.bg <- table(backgrounds[seq.id, ])[alphabet] # new for modified
#rownames(counts.bg) <- alphabet
counts.bg[is.na(counts.bg)] <- 0
bg.prob.value <- bg.prob(counts.bg + precomputed.bg.sum)
mw.prob.value <- 0
for(j in 1:W){
temp <- table(magic.words[seq.id, j])[alphabet]
temp[is.na(temp)] <- 0
mw.prob.value <- mw.prob.value + mw.prob(temp + precomputed.mw[j, ])
}
prob.distribution[new.position] <- bg.prob.value + mw.prob.value
}
prob.distribution
}
results.gibbs <- gibbs.sampler(gen.data.list$data, alphabet, 100, N, M, W, length(alphabet), alpha.bg, alpha.mw)
tibble(counts = results.gibbs[,1]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
starts
starts <- gen.data.list$starts
tibble(counts = results.gibbs[,1]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[,2]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[,3]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[,4]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[,5]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
N <-  10
alphabet <-  c("a", "b", "c", "d")
M <- 80
W<- 10
K <- 4
alpha.bg <-  c(1, 1, 1, 1)
alpha.mw<- c(0.8, 0.8, 0.8, 0.8)
starts <- gen.data.list$starts
gen.data.list <- generate.data(N, alphabet = c("a", "b", "c", "d"), M, W, alpha.bg,
alpha.mw)
B <- N * (M - W)
part1.bg.prob <- lgamma(sum(alpha.bg)) - lgamma(B + sum(alpha.bg))  # checked: it works
part1.mw.prob <- lgamma(sum(alpha.mw)) - lgamma(N*W + sum(alpha.mw))
loggamma.mw <- lgamma(alpha.mw)
loggamma.bg <- lgamma(alpha.bg)
results.gibbs <- gibbs.sampler(gen.data.list$data, alphabet, 200, N, M, W, length(alphabet), alpha.bg, alpha.mw)
tibble(counts = results.gibbs[5,]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
results.gibbs %>% dim
tibble(counts = results.gibbs[, 5]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[, 4]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[, 10]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[, 9]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
seq(1,201,5)
tibble(counts = results.gibbs[seq(1,201,5), 9]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[seq(1,201,5), 1]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[seq(1,201,5), 2]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[seq(1,201,5), 3]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[seq(1,201,5), 4]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
N <-  10
alphabet <-  c("a", "b", "c", "d")
M <- 30
W<- 10
K <- 4
alpha.bg <-  c(1, 1, 1, 1)
alpha.mw<- c(0.8, 0.8, 0.8, 0.8)
starts <- gen.data.list$starts
gen.data.list <- generate.data(N, alphabet = c("a", "b", "c", "d"), M, W, alpha.bg,
alpha.mw)
N <-  10
alphabet <-  c("a", "b", "c", "d")
M <- 30
W<- 10
K <- 4
alpha.bg <-  c(1, 1, 1, 1)
alpha.mw<- c(12,7,3,1)
starts <- gen.data.list$starts
gen.data.list <- generate.data(N, alphabet = c("a", "b", "c", "d"), M, W, alpha.bg,
alpha.mw)
# PREPARE GLOBAL DATA
B <- N * (M - W)
part1.bg.prob <- lgamma(sum(alpha.bg)) - lgamma(B + sum(alpha.bg))  # checked: it works
part1.mw.prob <- lgamma(sum(alpha.mw)) - lgamma(N*W + sum(alpha.mw))
loggamma.mw <- lgamma(alpha.mw)
loggamma.bg <- lgamma(alpha.bg)
results.gibbs <- gibbs.sampler(gen.data.list$data, alphabet, 300, N, M, W, length(alphabet), alpha.bg, alpha.mw)
tibble(counts = results.gibbs[, 1]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[, 2]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[, 3]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[, 4]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[, 5]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[, 6]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[, 7]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[, 10]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[,9]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[,7]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[,6]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
N <-  5
alphabet <-  c("a", "b", "c", "d")
M <- 30
W<- 10
K <- 4
alpha.bg <-  c(1, 1, 1, 1)
alpha.mw<- c(12,7,3,1)
starts <- gen.data.list$starts
gen.data.list <- generate.data(N, alphabet = c("a", "b", "c", "d"), M, W, alpha.bg,
alpha.mw)
# PREPARE GLOBAL DATA
B <- N * (M - W)
part1.bg.prob <- lgamma(sum(alpha.bg)) - lgamma(B + sum(alpha.bg))  # checked: it works
part1.mw.prob <- lgamma(sum(alpha.mw)) - lgamma(N*W + sum(alpha.mw))
loggamma.mw <- lgamma(alpha.mw)
loggamma.bg <- lgamma(alpha.bg)
results.gibbs <- gibbs.sampler(gen.data.list$data, alphabet, 300, N, M, W, length(alphabet), alpha.bg, alpha.mw)
starts
N <-  5
alphabet <-  c("a", "b", "c", "d")
M <- 30
W<- 10
K <- 4
alpha.bg <-  c(1, 1, 1, 1)
alpha.mw<- c(12,7,3,1)
gen.data.list <- generate.data(N, alphabet = c("a", "b", "c", "d"), M, W, alpha.bg,
alpha.mw)
starts <- gen.data.list$starts
N <-  5
alphabet <-  c("a", "b", "c", "d")
M <- 30
W<- 10
K <- 4
alpha.bg <-  c(1, 1, 1, 1)
alpha.mw<- c(12,7,3,1)
gen.data.list <- generate.data(N, alphabet = c("a", "b", "c", "d"), M, W, alpha.bg,
alpha.mw)
starts <- gen.data.list$starts
B <- N * (M - W)
part1.bg.prob <- lgamma(sum(alpha.bg)) - lgamma(B + sum(alpha.bg))  # checked: it works
part1.mw.prob <- lgamma(sum(alpha.mw)) - lgamma(N*W + sum(alpha.mw))
loggamma.mw <- lgamma(alpha.mw)
loggamma.bg <- lgamma(alpha.bg)
results.gibbs <- gibbs.sampler(gen.data.list$data, alphabet, 300, N, M, W, length(alphabet), alpha.bg, alpha.mw)
tibble(counts = results.gibbs[,5]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[,1]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[,2]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[,3]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = results.gibbs[,4]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
all.chains <- matrix(nrow = num.chains, ncol = N)
num.chains <- 10
N <-  5
alphabet <-  c("a", "b", "c", "d")
M <- 30
W<- 10
K <- 4
alpha.bg <-  c(1, 1, 1, 1)
alpha.mw<- c(12,7,3,1)
gen.data.list <- generate.data(N, alphabet = c("a", "b", "c", "d"), M, W, alpha.bg,
alpha.mw)
starts <- gen.data.list$starts
# PREPARE GLOBAL DATA
B <- N * (M - W)
part1.bg.prob <- lgamma(sum(alpha.bg)) - lgamma(B + sum(alpha.bg))  # checked: it works
part1.mw.prob <- lgamma(sum(alpha.mw)) - lgamma(N*W + sum(alpha.mw))
loggamma.mw <- lgamma(alpha.mw)
loggamma.bg <- lgamma(alpha.bg)
num.chains <- 10
all.chains <- matrix(nrow = num.chains, ncol = N)
#results.gibbs <- gibbs.sampler(gen.data.list$data, alphabet,  150, N, M, W, length(alphabet), alpha.bg, alpha.mw)
# 1 gibbs.sampler returns 1 chain which was initialized randomly
# but I need to have multiple chains because the initial state is important
for(c in 1:num.chains){
all.chains <- rbind(all.chains, gibbs.sampler(gen.data.list$data, alphabet, 150, N, M, W, length(alphabet), alpha.bg, alpha.mw))
}
all.chains
dim(all.chains)
tibble(counts = all.chains[-(1:N),4]) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
all.chins[1, ]
all.chains[1, ]
all.chains[9, ]
all.chains[10, ]
all.chains[1, ]
all.chains[11, ]
all.chains[-(1:N),4]
all.chains[1,4]
all.chains[11,4]
all.chains[12,4]
all.chains[99,4]
View(all.chains)
all.chains[11, ]
all.chains[12, ]
all.chains[12, 2]
all.chains[c(11,12), 2]
all.chains[c(11,12), ]
all.chains[c(11,12), ] %>% apply(1, sum)
all.chains[c(11,12), ] %>% apply(2, sum)
tibble(counts = all.chains[-(1:N),4] ) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = all.chains[-(1:N),4] %>% apply(2, sum)) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
all.chains[-(1:N), 4] %>% dim()
all.chains[-(1:N), 4]
tibble(counts = all.chains[-(1:N), ] %>% apply(2, sum)) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
num.chains <- 5
all.chains <- matrix(nrow = 0, ncol = N)
#results.gibbs <- gibbs.sampler(gen.data.list$data, alphabet,  150, N, M, W, length(alphabet), alpha.bg, alpha.mw)
# 1 gibbs.sampler returns 1 chain which was initialized randomly
# but I need to have multiple chains because the initial state is important
for(c in 1:num.chains){
all.chains <- rbind(all.chains, gibbs.sampler(gen.data.list$data, alphabet, 150, N, M, W, length(alphabet), alpha.bg, alpha.mw))
}
tibble(counts = all.chains[, 1] %>% apply(2, sum)) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
all.chains[, 1]
all.chains[, 1] %>% apply(2, sum)
all.chains[, 1] %>% apply(2, SUM)
all.chains[, 1] %>% apply(2, sum)
all.chains[, 1] %>% apply(1, sum)
all.chains[, 1]
all.chains[, 1] %>% dim()
as.matrix(all.chains[, 1])
as.matrix(all.chains[, 1]) %>% length()
5*150
tibble(counts = as.matrix(all.chains[, 1])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 2])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 3])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 4])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 5])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 4])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 5])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
as.matrix(all.chains[, 5]) %>% table
num.chains <- 10
all.chains <- matrix(nrow = 0, ncol = N)
#results.gibbs <- gibbs.sampler(gen.data.list$data, alphabet,  150, N, M, W, length(alphabet), alpha.bg, alpha.mw)
# 1 gibbs.sampler returns 1 chain which was initialized randomly
# but I need to have multiple chains because the initial state is important
for(c in 1:num.chains){
all.chains <- rbind(all.chains, gibbs.sampler(gen.data.list$data, alphabet, 150, N, M, W, length(alphabet), alpha.bg, alpha.mw))
}
tibble(counts = as.matrix(all.chains[, 5])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
starts <- gen.data.list$starts
starts
tibble(counts = as.matrix(all.chains[-c(1:150), 5])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 4])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 3])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 2])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[-c(1:500), 2])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 2])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[1300:1510, 2])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[1000:1510, 2])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[1000:1510, 5])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[-1000:1510, 5])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 1])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 2])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 3])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 4])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 5])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 5])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
all.chains[, 5]
all.chains[, 5][0]
all.chains[, 5] %>% table()
all.chains[, 4] %>% table()
all.chains[, 4] %>% table() %>% max
all.chains[, 4] %>% table() %>% which.max()
all.chains[, 4] %>% table() %>% which.max()
all.chains[, 4] %>% table() %>% which.max()
all.chains[, 4] %>% table() %>% which.max()
all.chains[, 4] %>% table() %>% which.max() %>% length
all.chains[, 4] %>% table() %>% which.max()
all.chains[, 5] %>% table() %>% which.max()
all.chains[, 1] %>% table() %>% which.max()
all.chains[, 2] %>% table() %>% which.max()
all.chains[, 3] %>% table() %>% which.max()
all.chains[, 4] %>% table() %>% which.max()
all.chains[, 5] %>% table() %>% which.max()
N <-  5
alphabet <-  c("a", "b", "c", "d")
M <- 30
W<- 10
K <- 4
alpha.bg <-  c(1, 1, 1, 1)
alpha.mw<- c(12,7,3,1)
gen.data.list <- generate.data(N, alphabet = c("a", "b", "c", "d"), M, W, alpha.bg,
alpha.mw)
starts <- gen.data.list$starts
# PREPARE GLOBAL DATA
B <- N * (M - W)
part1.bg.prob <- lgamma(sum(alpha.bg)) - lgamma(B + sum(alpha.bg))  # checked: it works
part1.mw.prob <- lgamma(sum(alpha.mw)) - lgamma(N*W + sum(alpha.mw))
loggamma.mw <- lgamma(alpha.mw)
loggamma.bg <- lgamma(alpha.bg)
num.chains <- 10
all.chains <- matrix(nrow = 0, ncol = N)
#results.gibbs <- gibbs.sampler(gen.data.list$data, alphabet,  150, N, M, W, length(alphabet), alpha.bg, alpha.mw)
# 1 gibbs.sampler returns 1 chain which was initialized randomly
# but I need to have multiple chains because the initial state is important
for(c in 1:num.chains){
all.chains <- rbind(all.chains, gibbs.sampler(gen.data.list$data, alphabet, 150, N, M, W, length(alphabet), alpha.bg, alpha.mw))
}
tibble(counts = as.matrix(all.chains[, 5])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 4])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 3])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 2])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 1])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
N <-  5
alphabet <-  c("a", "b", "c", "d")
M <- 30
W<- 10
K <- 4
alpha.bg <-  c(1, 1, 1, 1)
alpha.mw<- c(0.8 ,0.8, 0.8, 0.8)
gen.data.list <- generate.data(N, alphabet = c("a", "b", "c", "d"), M, W, alpha.bg,
alpha.mw)
starts <- gen.data.list$starts
# PREPARE GLOBAL DATA
B <- N * (M - W)
part1.bg.prob <- lgamma(sum(alpha.bg)) - lgamma(B + sum(alpha.bg))  # checked: it works
part1.mw.prob <- lgamma(sum(alpha.mw)) - lgamma(N*W + sum(alpha.mw))
loggamma.mw <- lgamma(alpha.mw)
loggamma.bg <- lgamma(alpha.bg)
num.chains <- 10
all.chains <- matrix(nrow = 0, ncol = N)
num.chains <- 10
all.chains <- matrix(nrow = 0, ncol = N)
#results.gibbs <- gibbs.sampler(gen.data.list$data, alphabet,  150, N, M, W, length(alphabet), alpha.bg, alpha.mw)
# 1 gibbs.sampler returns 1 chain which was initialized randomly
# but I need to have multiple chains because the initial state is important
for(c in 1:num.chains){
all.chains <- rbind(all.chains, gibbs.sampler(gen.data.list$data, alphabet, 500, N, M, W, length(alphabet), alpha.bg, alpha.mw))
}
tibble(counts = as.matrix(all.chains[, 5])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 4])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 3])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 2])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[, 1])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
501*10
k <- 1
k*(5010):(k+1)*(5010)-1
k*(5010):(k+1)*(5010)-1, 1]
k*(5010):(k+1)*(5010)-1 %>% length
k*(5010):((k+1)*(5010)-1) %>% length()
tibble(counts = as.matrix(all.chains[k*(5010):((k+1)*(5010)-1), 1])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
k <- 1
tibble(counts = as.matrix(all.chains[k*(5010):((k+1)*(5010)-1), 1])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
gibbs.sampler(gen.data.list$data, alphabet, 50, N, M, W, length(alphabet), alpha.bg, alpha.mw)
gibbs.sampler(gen.data.list$data, alphabet, 50, N, M, W, length(alphabet), alpha.bg, alpha.mw) %>% dim
(k-1)*(501):k*501
(k-1)*(501):k*501  %>% legnth
(k-1)*(501):k*501  %>% legth
(k-1)*(501):k*501  %>% length
((k-1)*(501)):k*501  %>% length
((k-1)*(501)):(k*501)
((k-1)*(501)):(k*501) %>% length
tibble(counts = as.matrix(all.chains[((k-1)*(501)+1):k*501])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[((k-1)*(501)+1):(k*501)])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
tibble(counts = as.matrix(all.chains[((k-1)*(501)+1):(k*501)])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
k <- 6
tibble(counts = as.matrix(all.chains[((k-1)*(501)+1):(k*501)])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
k <- 9
tibble(counts = as.matrix(all.chains[((k-1)*(501)+1):(k*501)])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
k <- 3
tibble(counts = as.matrix(all.chains[((k-1)*(501)+1):(k*501)])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
k <- 1
tibble(counts = as.matrix(all.chains[((k-1)*(501)+1):(k*501)])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
k <- 7
tibble(counts = as.matrix(all.chains[((k-1)*(501)+1):(k*501)])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
k <- 8
tibble(counts = as.matrix(all.chains[((k-1)*(501)+1):(k*501)])) %>% ggplot(aes(x = counts)) + geom_bar() +
scale_x_continuous(labels = 1:(M - W + 1), breaks = 1:(M - W + 1))
